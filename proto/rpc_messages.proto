syntax = "proto3";


/**
 * @brief The RPC message identifier
 *
 * The value of the message identifier is used to give priority to messages.
 * The higer the message id the higer the message priority.
 */
enum rpc_msg_type {
    //--- Application Originated Messages
    RPC_APP_PAIR = 0;
    RPC_APP_EXIT = 1;

    RPC_APP_RESP = 2;          ///< Response to an APP request
    RPC_APP_MSGS_COUNT = 3;    ///< The number of APP originated messages

    //--- Execution Context Originated Messages
    RPC_EXC_SCHEDULE = 4;
    RPC_EXC_START = 5;
    RPC_EXC_SET = 6;
    RPC_EXC_CLEAR = 7;
    RPC_EXC_STOP = 8;
    RPC_EXC_REGISTER = 9;
    RPC_EXC_RTNOTIFY = 10;
    RPC_EXC_UNREGISTER = 11;

    RPC_EXC_RESP = 12;          ///< Response to an EXC request
    RPC_EXC_MSGS_COUNT = 13;    ///< The number of EXC originated messages


    //--- Barbeque Originated Messages
    RPC_BBQ_SYNCP_POSTCHANGE = 14;
    RPC_BBQ_SYNCP_DOCHANGE = 15;
    RPC_BBQ_SYNCP_SYNCCHANGE = 16;
    RPC_BBQ_SYNCP_PRECHANGE = 17;

    RPC_BBQ_STOP_EXECUTION = 18;
    RPC_BBQ_GET_PROFILE = 19;

    RPC_BBQ_RESP = 20;         ///< Response to a BBQ command
    RPC_BBQ_MSGS_COUNT = 21;   ///< The number of EXC originated messages
}


/**
 * @brief The Execution Context (EXC) programming language.
 * @ingroup rtlib_sec03_plain_services
 */
enum RTLIB_ProgrammingLanguage {
    /** Undefined application language */
    RTLIB_LANG_UNDEF = 0;
    /** C coded EXC */
    RTLIB_LANG_C = 1;
    /** CPP coded EXC */
    RTLIB_LANG_CPP = 2;
    /** OpenCL coded EXC */
    RTLIB_LANG_OPENCL = 3;
    RTLIB_LANG_COUNT = 4;
}


/**
 * @brief The operation requested on a resource constraint.
 * @ingroup rtlib_sec03_plain_constr
 */
enum RTLIB_ConstraintOperation {
    /** Remove the specified constraint */
    CONSTRAINT_REMOVE = 0;
    /** Add the specified constraint */
    CONSTRAINT_ADD = 1;
}


/**
 * @brief The possible boundary asserted by a resource constraint.
 * @ingroup rtlib_sec03_plain_constr
 *
 * The EXC can constrain its resource allocation, i.e. it can tell the
 * BarbequeRTRM not to take into account some of the AWMs contained in the
 * recipe.
 */
enum RTLIB_ConstraintType {
    /** Targets AWMs lower or equal to the specified one */
    LOWER_BOUND = 0;
    /** Targets AWMs higher or equal to the specified one */
    UPPER_BOUND = 1;
    /** Targets the specified AWM */
    EXACT_VALUE = 2;
}


/**
 * @brief A constraint asserted on recipe specified working modes
 * @ingroup rtlib_sec03_plain_constr
 *
 * Applications have an associated set of working modes, each one defining a
 * certain amount of resources usage.  Applications could assert some
 * constraints at run-time, to invalidate a subset of its own working modes.
 */
message RTLIB_Constraint {
    /** The identified of an Application Working Mode (AWM) */
    uint32 awm = 1;
    /** The required operation on the previous AWM */
    RTLIB_ConstraintOperation operation = 2;
    /** The constraint boundary */
    RTLIB_ConstraintType type = 3;
};


/**
 * @brief The RPC message header
 */
message rpc_msg_header {
    /** The command to execute (defines the message "payload" type) */
    rpc_msg_type typ = 1;
    /** A token used by the message sender to match responses */
    uint32 token = 2;
    // FIXME These is maybe superfluous... it is required just for the pairing
    // Then it is better to exchange a communication token ;-)
    /** The application ID (thread ID) */
    uint32 app_pid = 3;
    // FIXME This is required just by EXC related messages: better to move there
    /** The execution context ID */
    uint32 exc_id = 4;
}


/**
 * @brief The response to a command
 */
message rpc_msg_resp {
    /** The RPC fifo command header */
    rpc_msg_header hdr = 1;
    /** The RTLIB command exit code */
    uint32 result = 2;
    /** An estimation of the Synchronization Latency */
    uint32 syncLatency = 3;
}


message rpc_msg {
    rpc_msg_header hdr = 1;
    uint32 mjr_version = 2;
    uint32 mnr_version = 3;
    string app_name = 4;
    string exc_name = 5;
    string recipe = 6;
    RTLIB_ProgrammingLanguage lang = 7;
    uint32 count = 8;
    RTLIB_Constraint constraints = 9;
    sint32 gap = 10;
    sint32 cusage = 11;
    sint32 ctime_ms = 12;
    uint32 event = 13;
    sint32 awm = 14;
    uint64 cpu_ids = 15;
    uint64 cpu_ids_isolation = 16;
    uint64 mem_ids = 17;
    repeated rpc_msg_BBQ_SYNCP_PRECHANGE_SYSTEM systems = 18;
    uint32 timeout = 19;
    bool is_ocl = 20;
}


message rpc_msg_BBQ_SYNCP_PRECHANGE_SYSTEM {
    /** The system number */
    sint32 sys_id = 1;
    /** Number of CPU (processors) assigned */
    sint32 nr_cpus = 2;
    /** Number of processing elements assigned */
    sint32 nr_procs = 3;
    /** Amount of processing quota assigned */
    sint32 r_proc = 4;
    /** Amount of memory assigned */
    sint32 r_mem = 5;
    /** CONFIG_BBQUE_OPENCL */
    sint32 r_gpu = 6;
    sint32 r_acc = 7;
    /** Assigned OpenCL device */
    sint32 dev = 8;
}
